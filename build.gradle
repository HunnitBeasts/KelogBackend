plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.sonarqube" version "5.0.0.4638"
	id 'jacoco'
}

group = 'com.hunnit_beasts'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

	// Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// ModelMapper 추가
	implementation 'org.modelmapper:modelmapper:3.2.0'

	// spring security 추가
	implementation "org.springframework.boot:spring-boot-starter-security"

	// jwt 추가
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	// spring AOP
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// test Log
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.withType(Test) {
	enabled = true
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << "-parameters"
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}

// 소나큐브 설정
sonarqube {
	properties {
		property "sonar.projectKey", "kelog"
		property "sonar.projectName", "kelog"
		property "sonar.host.url", "http://varen.iptime.org:9000"
		property "sonar.token", System.getenv("SONAR_TOKEN")
		property "sonar.sources", "src" // 소스 경로
		property "sonar.language", "java" // 언어
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.profile", "Sonar way" // 소나큐브에서 적용할 프로필(분석할 수준 설정)
		property "sonar.java.binaries", "${buildDir}/classes" // 자바 클래스 파일위치
		property "sonar.test.inclusions", "**/*Test.java" // 코드 분석에 사용할 테스트 소스
		property "sonar.exclusions", "**/resources/static/**, **/Q*.java, **/test/** , " +
				"**/controller/** , **/entity/**, **/config/**, **/enumeration/**" // 테스트커버리지에서 제외할 파일
		property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml" // jacoco 플러그인의 결과파일
	}
}

// JaCoCo 설정
test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
		html.destination file("${buildDir}/jacocoHtml")
	}
}

tasks.jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = "CLASS"

			excludes = ["com.hunnit_beasts.kelog.*.entity.**"]
			excludes = ["com.hunnit_beasts.kelog.*.controller.**"]
			excludes = ["com.hunnit_beasts.kelog.*.config.**"]
			excludes = ["com.hunnit_beasts.kelog.*.enumeration.**"]
			excludes = ["com.hunnit_beasts.kelog.*.dto.convert.user.CustomUserDetails.java"]

			limit {
				counter = "BRANCH"
				value = "COVEREDRATIO"
				minimum = 0.80.toBigDecimal()
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification